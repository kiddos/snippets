snippet #!
	#!/usr/bin/python

snippet imp
	import ${1:module}
# Module Docstring
snippet doc
	'''${1:Documents}'''
snippet docs
	'''
	File: ${1:`Filename('$1.py', 'foo.py')`}
	Author: ${2:`g:snips_author`}
	Description: ${3}
	'''
snippet wh
	while ${1:condition}:
		${2:# code...}
snippet whi
	while ${1:condition}:
		${2:# code...}
snippet whil
	while ${1:condition}:
		${2:# code...}
snippet while
	while ${1:condition}:
		${2:# code...}
snippet fo
	for ${1:needle} in ${2:haystack}:
		${3:# code...}
snippet for
	for ${1:needle} in ${2:haystack}:
		${3:# code...}
# New Class
snippet cl
	class ${1:ClassName}(${2:object}):
		def __init__(self, ${4:arg}):
			${5:super($1, self).__init__()}
			self.$4 = $4
			${6}
snippet cla
	class ${1:ClassName}(${2:object}):
		def __init__(self, ${4:arg}):
			${5:super($1, self).__init__()}
			self.$4 = $4
			${6}
snippet clas
	class ${1:ClassName}(${2:object}):
		def __init__(self, ${4:arg}):
			${5:super($1, self).__init__()}
			self.$4 = $4
			${6}
snippet class
	class ${1:ClassName}(${2:object}):
		def __init__(self, ${4:arg}):
			${5:super($1, self).__init__()}
			self.$4 = $4
			${6}
# New Function
snippet deff
	def ${1:fname}(${2:`indent('.') ? 'self' : ''`}):
		"""${3:docstring for $1}"""
		${4:pass}
snippet def
	def ${1:fname}(${2:`indent('.') ? 'self' : ''`}):
		${3}
# New Method
snippet defs
	def ${1:mname}(self, ${2:arg}):
		${3:pass}
# New Property
snippet property
	def ${1:foo}():
		doc = "${2:The $1 property.}"
		def fget(self):
			${3:return self._$1}
		def fset(self, value):
			${4:self._$1 = value}
# Lambda
snippet ld
	${1:var} = lambda ${2:vars} : ${3:action}
snippet .
	self.
snippet try Try/Except
	try:
		${1:pass}
	except ${2:Exception}, ${3:e}:
		${4:raise $3}
snippet try Try/Except/Else
	try:
		${1:pass}
	except ${2:Exception}, ${3:e}:
		${4:raise $3}
	else:
		${5:pass}
snippet try Try/Except/Finally
	try:
		${1:pass}
	except ${2:Exception}, ${3:e}:
		${4:raise $3}
	finally:
		${5:pass}
snippet try Try/Except/Else/Finally
	try:
		${1:pass}
	except ${2:Exception}, ${3:e}:
		${4:raise $3}
	else:
		${5:pass}
	finally:
		${6:pass}
# if __name__ == '__main__':
snippet ifmain
	if __name__ == '__main__':
		${1:main()}
# __magic__
snippet _
	__${1:init}__${2}

snippet tk
	import Tkinter

	root = Tkinter.Tk()
	${1}
	root.mainloop()
snippet pygame
	import pygame

	# color definition

	# object definition

	# some function

	# init
	status = pygame.init()
	if status[1] != 0:
	    print("ERROR: fail to init PyGame")
	    quit()

	# game data
	FPS = 60
	window_size = (${1:800}, ${2:600})
	game_display = pygame.display.set_mode(window_size)

	# title
	pygame.display.set_caption('${3:Title}')

	# main loop
	running = True
	clock = pygame.time.Clock()

	while running:
	    for event in pygame.event.get():
	        if event.type == pygame.QUIT:
	            running = False

	    # update the screen
	    pygame.display.update()
	    clock.tick(FPS)

	# exit
	pygame.quit()
	quit()
