#templates
snippet template blank
	#include <stdio.h>

	int main(${2:int argc, char *argv[]})
	{
		${1:// code ...}
		return 0;
	}${3}
snippet template hello world
	#include <stdio.h>

	int main(void)
	{
		printf("Hello World\n");
		return 0;
	}
snippet template SDL2
	#include <SDL2/SDL.h>
	#include <SDL2/SDL_image.h>
	#include <SDL2/SDL_ttf.h>

	#include <time.h>

	#define WIDTH 640
	#define HEIGHT 480

	#define FPS_FONT "tama.ttf"
	#define FPS_SIZE 12

	const double FPS = 60;

	int main_init();
	SDL_Texture *main_init_fps_texture(TTF_Font *font,
			uint64_t frames, uint32_t tp,
			SDL_Renderer *ren, SDL_Color color);
	void main_render_fps(SDL_Renderer *ren, SDL_Texture *fps_tex);

	int main(int argc, char *argv[])
	{
		SDL_Window *win = NULL;
		SDL_Renderer *ren = NULL;
		SDL_Texture *fps = NULL;

		TTF_Font *font = NULL;
		SDL_Event e;
		SDL_bool running = SDL_TRUE;
		SDL_Color fc;
		fc.r = 255;
		fc.a = 255;
		fc.g = 255;
		fc.b = 255;

		uint32_t st = 0, ttp = 0;
		uint32_t fst = 0, ftp = 0;
		uint32_t frames = 0;

		if(!main_init()) return 1;

		win = SDL_CreateWindow("Test",
				0, 0, WIDTH, HEIGHT, SDL_WINDOW_SHOWN);
		if(!win)
		{
			fprintf(stderr, "fail to create SDL window, error: %s\n",
					SDL_GetError());
			return 1;
		}

		ren = SDL_CreateRenderer(win, -1,
				SDL_RENDERER_ACCELERATED | SDL_RENDERER_PRESENTVSYNC);
		if(!ren)
		{
			fprintf(stderr, "fail to create SDL renderer, error: %s\n",
					SDL_GetError());
			SDL_DestroyWindow(win);
			return 1;
		}

		font = TTF_OpenFont(FPS_FONT, FPS_SIZE);
		if(!font)
		{
			fprintf(stderr, "fail to open TTF font, error: %s\n",
					TTF_GetError());
			SDL_DestroyWindow(win);
			SDL_DestroyRenderer(ren);
			return 1;
		}

		fps = main_init_fps_texture(font, frames, ttp, ren, fc);
		if(!fps)
		{
			fprintf(stderr, "fail to create fps texture, error: %s\n",
					SDL_GetError());
			SDL_DestroyWindow(win);
			SDL_DestroyRenderer(ren);
			TTF_CloseFont(font);
			return 1;
		}

		// main loop
		while(running)
		{
			fst = SDL_GetTicks();
			while(SDL_PollEvent(&e))
			{
				if(e.type == SDL_QUIT)
					running = SDL_FALSE;
			}

			// update
			frames ++;
			if(frames == 0) st = 0;

			// compute start time and fps
			ttp = SDL_GetTicks() - st;
			if(fps) SDL_DestroyTexture(fps);
			fps = main_init_fps_texture(font, frames, ttp, ren, fc);

			// render
			SDL_SetRenderDrawColor(ren, 0, 0, 0, 255);
			SDL_RenderClear(ren);
			// fps
			main_render_fps(ren, fps);
			// drawings


			SDL_RenderPresent(ren);
			// end of rendering

			// control fps
			ftp = SDL_GetTicks() - fst;
			if(ftp < 1000 / FPS)
				SDL_Delay(1000 / FPS - ftp);
		}

		// free memory
		SDL_DestroyWindow(win);
		SDL_DestroyRenderer(ren);
		SDL_DestroyTexture(fps);
		TTF_CloseFont(font);
		return 0;
	}

	int main_init()
	{
		const unsigned int IMG_FLAG = IMG_INIT_PNG | IMG_INIT_TIF | IMG_INIT_JPG;
		if(SDL_Init(SDL_INIT_VIDEO | SDL_INIT_AUDIO))
		{
			fprintf(stderr, "fail to initialize SDL, error: %s\n",
					SDL_GetError());
			return 0;
		}
		atexit(SDL_Quit);
		if((IMG_Init(IMG_FLAG) & IMG_FLAG) != IMG_FLAG)
		{
			fprintf(stderr, "fail to initialize IMG, error: %s\n",
					SDL_GetError());
			return 0;
		}
		atexit(IMG_Quit);
		if(TTF_Init() == -1)
		{
			fprintf(stderr, "fail to initialize TTF, error: %s\n",
					SDL_GetError());
			return 0;
		}
		atexit(TTF_Quit);
		return 1;
	}

	void main_render_fps(SDL_Renderer *renderer, SDL_Texture *texture)
	{
		SDL_Rect dst;

		SDL_QueryTexture(texture, NULL, NULL, &dst.w, &dst.h);
		dst.x = WIDTH - 65;
		dst.y = 0;
		SDL_RenderCopy(renderer, texture, NULL, &dst);
	}

	SDL_Texture* main_init_fps_texture(TTF_Font *font,
			uint64_t frames, uint32_t tp,
			SDL_Renderer *ren, SDL_Color color)
	{
		SDL_Surface* surf = NULL;
		SDL_Texture* texture = NULL;

		if (!font || !ren)
		{
			fprintf(stderr, "null pointer\n");
			return NULL;
		}

		char text[1024] = {'\0'};
		sprintf(text, "fps: %.2lf", frames * 1000.0 / tp);
		surf = TTF_RenderText_Blended(font, text, color);
		if (!surf)
		{
			fprintf(stderr, "Fail to render text to sdl surface\n");
			return NULL;
		}

		texture = SDL_CreateTextureFromSurface(ren, surf);
		if (!texture)
		{
			fprintf(stderr, "Fail to create texture from surface\n");
			SDL_FreeSurface(surf);
			return NULL;
		}

		SDL_FreeSurface(surf);
		return texture;
	}
snippet template c opencv2
	#include <opencv2/core/core_c.h>
	#include <opencv2/imgproc/imgproc_c.h>
	#include <opencv2/highgui/highgui_c.h>
	#include <opencv2/objdetect/objdetect_c.h>

	#include <stdio.h>

	int main(int argc, char *argv[])
	{
		${1:// code ...}
		return 0;
	}
snippet template c++ opencv2
	#include <opencv2/core/core.hpp>
	#include <opencv2/imgproc/imgproc.hpp>
	#include <opencv2/highgui/highgui.hpp>
	#include <opencv2/objdetect/objdetect.hpp>

	#include <iostream>
	#include <cstdio>

	using namespace cv;
	using namespace std;

	int main(int argc, char *argv[])
	{
		${1:// code ...}
		return 0;
	}
# main()
snippet main
	int main(int argc, char *argv[])
	{
		${1}
		return 0;
	}
# #include <...>
snippet in
	#include <${1:stdio}.h>${2}
snippet inc
	#include <${1:stdio}.h>${2}
snippet incl
	#include <${1:stdio}.h>${2}
snippet inclu
	#include <${1:stdio}.h>${2}
snippet includ
	#include <${1:stdio}.h>${2}
snippet include
	#include <${1:stdio}.h>${2}
# #include "..."
snippet Inc
	#include "${1:`Filename("$1.h")`}"${2}
snippet Incl
	#include "${1:`Filename("$1.h")`}"${2}
snippet Inclu
	#include "${1:`Filename("$1.h")`}"${2}
snippet Includ
	#include "${1:`Filename("$1.h")`}"${2}
snippet Include
	#include "${1:`Filename("$1.h")`}"${2}
# #ifndef ... #define ... #endif
snippet De
	#ifndef $1
	#define ${1:SYMBOL} ${2:value}
	#endif${3}
snippet Def
	#ifndef $1
	#define ${1:SYMBOL} ${2:value}
	#endif${3}
snippet Defi
	#ifndef $1
	#define ${1:SYMBOL} ${2:value}
	#endif${3}
snippet Defin
	#ifndef $1
	#define ${1:SYMBOL} ${2:value}
	#endif${3}
snippet Define
	#ifndef $1
	#define ${1:SYMBOL} ${2:value}
	#endif${3}
# #define
snippet de
	#define 
snippet def
	#define 
snippet defi
	#define 
snippet defin
	#define 
snippet define
	#define 
snippet #d
	#define 
snippet #de
	#define 
snippet #def
	#define 
snippet #defi
	#define 
snippet #defin
	#define 
# ifdef
snippet ifdef
	#ifdef ${1:FOO}
		${2:#define }
	#endif
snippet #if
	#if ${1:FOO}
		${2}
	#endif
# Header Include-Guard
# (the randomizer code is taken directly from TextMate; it could probably be
# cleaner, I don't know how to do it in vim script)
snippet once
	#ifndef ${1:`toupper(Filename('', 'UNTITLED').'_'.system("/usr/bin/ruby -e 'print (rand * 2821109907455).round.to_s(36)'"))`}
	#define $1
	${2}

	#endif /* end of include guard: $1 */
# If Condition
snippet if
	if (${1:/* condition */})
	{
		${2:/* code */}
	}
snippet el
	else
	{
		${1}
	}
snippet els
	else
	{
		${1}
	}
snippet else
	else
	{
		${1}
	}
# Tertiary conditional
snippet t
	${1:/* condition */} ? ${2:a} : ${3:b}
# Do While Loop
snippet do
	do
	{
		${2:/* code */}
	} while (${1:/* condition */});
# While Loop
snippet wh
	while (${1:/* condition */})
	{
		${2:/* code */}
	}
snippet whi
	while (${1:/* condition */})
	{
		${2:/* code */}
	}
snippet whil
	while (${1:/* condition */})
	{
		${2:/* code */}
	}
snippet while
	while (${1:/* condition */})
	{
		${2:/* code */}
	}
# For Loop
snippet fo
	for (${1:uint32_t} ${2:i} = 0 ; $2 < ${3:bound}; $2 ++)
	{
		${4: /* code */}
	}${5}
snippet for
	for (${1:uint32_t} ${2:i} = 0 ; $2 < ${3:bound}; $2 ++)
	{
		${4: /* code */}
	}${5}
# Custom For Loop
snippet forr
	for (${1:i} = 0 ; $1 < ${2:count} ; $1 ${3:++})
	{
		${4:/* code */}
	}
# switch case
snippet sw
	switch (${1:variable})
	{
	case ${2:1}:
		break;
	}$3
snippet swi
	switch (${1:variable})
	{
	case ${2:1}:
		break;
	}$3
snippet swit
	switch (${1:variable})
	{
	case ${2:1}:
		break;
	}$3
snippet switc
	switch (${1:variable})
	{
	case ${2:1}:
		break;
	}$3
snippet switch
	switch (${1:variable})
	{
	case ${2:1}:
		break;
	}$3
# Function Declaration
snippet fu
	${1:void} ${2:`Filename()`_function_name}(${3:void})
	{
		${4:/* code */}
		return ${5};
	}${6}
snippet fun
	${1:void} ${2:`Filename()`_function_name}(${3:void})
	{
		${4:/* code */}
		return ${5};
	}${6}
snippet func
	${1:void} ${2:`Filename()`_function_name}(${3:void})
	{
		${4:/* code */}
		return ${5};
	}${6}
snippet funct
	${1:void} ${2:`Filename()`_function_name}(${3:void})
	{
		${4:/* code */}
		return ${5};
	}${6}
snippet functi
	${1:void} ${2:`Filename()`_function_name}(${3:void})
	{
		${4:/* code */}
		return ${5};
	}${6}
snippet functio
	${1:void} ${2:`Filename()`_function_name}(${3:void})
	{
		${4:/* code */}
		return ${5};
	}${6}
snippet function
	${1:void} ${2:`Filename()`_function_name}(${3:void})
	{
		${4:/* code */}
		return ${5};
	}${6}
# Function Body
snippet funb
	${1:void} ${2:function_name}(${3})
	{
		${4:/* code */}
	}
# Typedef
snippet td
	typedef ${1:int} ${2:Type};${3}
snippet ty
	typedef ${1:int} ${2:Type};${3}
snippet typ
	typedef ${1:int} ${2:Type};${3}
snippet type
	typedef ${1:int} ${2:Type};${3}
snippet typed
	typedef ${1:int} ${2:Type};${3}
snippet typede
	typedef ${1:int} ${2:Type};${3}
snippet typedef
	typedef ${1:int} ${2:Type};${3}
# Typedef struct
snippet tds
	typedef struct ${2:_$1 }{
		${3:/* data */}
	} ${1:`Filename('$1_t', 'name')`};
snippet typedef s
	typedef struct ${2:_$1 }{
		${3:/* data */}
	} ${1:`Filename('$1_t', 'name')`};
snippet typedef st
	typedef struct ${2:_$1 }{
		${3:/* data */}
	} ${1:`Filename('$1_t', 'name')`};
snippet typedef str
	typedef struct ${2:_$1 }{
		${3:/* data */}
	} ${1:`Filename('$1_t', 'name')`};
snippet typedef stru
	typedef struct ${2:_$1 }{
		${3:/* data */}
	} ${1:`Filename('$1_t', 'name')`};
snippet typedef struc
	typedef struct ${2:_$1 }{
		${3:/* data */}
	} ${1:`Filename('$1_t', 'name')`};
snippet typedef struct
	typedef struct ${2:_$1 }{
		${3:/* data */}
	} ${1:`Filename('$1_t', 'name')`};
# Struct
snippet st
	struct ${1:`Filename('$1_t', 'name')`}
	{
		${2:/* data */}
	} ${3: /* optional variable list */};${4}
snippet str
	struct ${1:`Filename('$1_t', 'name')`}
	{
		${2:/* data */}
	} ${3: /* optional variable list */};${4}
snippet stru
	struct ${1:`Filename('$1_t', 'name')`}
	{
		${2:/* data */}
	} ${3: /* optional variable list */};${4}
snippet struc
	struct ${1:`Filename('$1_t', 'name')`}
	{
		${2:/* data */}
	} ${3: /* optional variable list */};${4}
snippet struct
	struct ${1:`Filename('$1_t', 'name')`}
	{
		${2:/* data */}
	} ${3: /* optional variable list */};${4}
# Typdef enum
snippet tde
	typedef enum
	{
		${1:/* data */}
	} ${2:foo};
snippet typedef e
	typedef enum
	{
		${1:/* data */}
	} ${2:foo};
snippet typedef en
	typedef enum
	{
		${1:/* data */}
	} ${2:foo};
snippet typedef enu
	typedef enum
	{
		${1:/* data */}
	} ${2:foo};
snippet typedef enum
	typedef enum
	{
		${1:/* data */}
	} ${2:foo};
# sizeof
snippet siz
	sizeof(${1:data})
snippet size
	sizeof(${1:data})
snippet sizeo
	sizeof(${1:data})
snippet sizeof
	sizeof(${1:data})
# printf
snippet pr
	printf("${1}"${2});${3}
snippet pri
	printf("${1}"${2});${3}
snippet prin
	printf("${1}"${2});${3}
snippet print
	printf("${1}"${2});${3}
snippet printf
	printf("${1}"${2});${3}
snippet printf(
	printf("${1}"${2}
# scanf
snippet sc
	scanf("${1:%s}"${2});${3}
snippet sca
	scanf("${1:%s}"${2});${3}
snippet scan
	scanf("${1:%s}"${2});${3}
snippet scanf
	scanf("${1:%s}"${2});${3}
snippet scanf(
	scanf("${1:%s}"${2}
# fprintf
snippet fpr
	fprintf(${1:stderr}, "${2:%s}\n"${3});${4}
snippet fpri
	fprintf(${1:stderr}, "${2:%s}\n"${3});${4}
snippet fprin
	fprintf(${1:stderr}, "${2:%s}\n"${3});${4}
snippet fprint
	fprintf(${1:stderr}, "${2:%s}\n"${3});${4}
snippet fprintf
	fprintf(${1:stderr}, "${2:%s}\n"${3});${4}
snippet fprintf(
	fprintf(${1:stderr}, "${2:%s}\n"${3}
snippet {
	{
		${1:/* code */)
	
# unsigned 
snippet un
	unsigned
snippet uns
	unsigned
snippet unsi
	unsigned
snippet unsig
	unsigned
snippet unsign
	unsigned
snippet unsigne
	unsigned
# omp
snippet omp
	#pragma omp parallel
	{
		int id = omp_get_thread_num();
		${1}
	}
