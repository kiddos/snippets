# Read File Into Vector
snippet readfile
	std::ifstream file("${1:inputFile.txt}", std::ios::in);
	std::string content;
	if (file.is_open()) {
		for (std::string line ; getline(file, line) ;)
		content += line + "\n";
		std::cout << content << std::endl;
		file.close();
	}
# std::map
snippet map
	std::map<${1:key}, ${2:value}> map${3};
# std::vector
snippet vector
	std::vector<${1:char}> v${2};
# Namespace
snippet ns
	namespace ${1:`Filename('', 'my')`} {
		${2}
	} /* $1 */
snippet nam
	namespace ${1:`Filename('', 'my')`} {
		${2}
	} /* $1 */
snippet name
	namespace ${1:`Filename('', 'my')`} {
		${2}
	} /* $1 */
snippet names
	namespace ${1:`Filename('', 'my')`} {
		${2}
	} /* $1 */
snippet namesp
	namespace ${1:`Filename('', 'my')`} {
		${2}
	} /* $1 */
snippet namespa
	namespace ${1:`Filename('', 'my')`} {
		${2}
	} /* $1 */
snippet namespac
	namespace ${1:`Filename('', 'my')`} {
		${2}
	} /* $1 */
snippet namespace
	namespace ${1:`Filename('', 'my')`} {
		${2}
	} /* $1 */
# using namespace
snippet usi
	using namespace ${1:std};${2}
snippet usin
	using namespace ${1:std};${2}
snippet using
	using namespace ${1:std};${2}
# Class
snippet cl
	class ${1:`Filename('$1_t', 'name')`} {
	public:
		$1 (${2:arguments});
		virtual ~$1 ();
	private:
		${3:/* data */}
	};
snippet cla
	class ${1:`Filename('$1_t', 'name')`} {
	public:
		$1 (${2:arguments});
		virtual ~$1 ();
	private:
		${3:/* data */}
	};
snippet clas
	class ${1:`Filename('$1_t', 'name')`} {
	public:
		$1 (${2:arguments});
		virtual ~$1 ();
	private:
		${3:/* data */}
	};
snippet class
	class ${1:`Filename('$1_t', 'name')`} {
	public:
		$1 (${2:arguments});
		virtual ~$1 ();
	private:
		${3:/* data */}
	};
# cout
snippet cout
	cout << "${1}" << endl;
